#include <ctype.h> 
#include <stdio.h> 
#include <stdbool.h> 
#include <string.h> 
#include <stdlib.h> 

/* Token codes */
#define MAXCHAR 1000
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26
#define INCREMENT 12
#define DECREMENT 13
#define MOD_OP 14
#define LOG_AND 15
#define LOG_OR 16
#define LOG_NOT 17
#define OPEN_CODE_BLOCK 18
#define CLOSE_CODE_BLOCK 19
#define OPEN_FUNC 27
#define CLOSE_FUNC 28
#define PERL_IDENT 27

FILE *in_fp;

// Returns 'true' if the character is a DELIMITER. 
bool isDelimiter(char ch) 
{ 
        if (ch == ' ' || ch == '+' || ch == '-' || ch == '*' ||
                ch == '/' || ch == '!' || ch == ';' || ch == '>' ||
                ch == '<' || ch == '=' || ch == '(' || ch == ')' ||
                ch=='{' || ch=='}' ||ch==',' || ch=='%' || ch=='.')
        return (true); 
    return (false); 
} 
  
// Returns 'true' if the character is an OPERATOR. 
bool isOperator(char ch) 
{ 
    if (ch == '+' || ch == '-' || ch == '*' ||  
        ch == '/' || ch == '>' || ch == '<' ||  
        ch == '=' || ch == ">=" || ch == "<=" ||
        ch == "!=" || ch == "||" || ch == "&&" ||
        ch == "%" || ch == "!" || ch == "..") 
        return (true); 
    return (false); 
} 
  
// Returns 'true' if the string is a VALID PERL IDENTIFIER. 
bool perlIdentifier(char* str) 
{ 
    int i, len = strlen(str); 
        if (str[0]=='$' || str[0]=='@' || str[0]=='%')
            if ( (str[1] >= 'a' && str[1]<='z') || (str[1] >= 'A' && str[1]<='Z') ) {
                for (int i=2; i<len;i++){
                    if ((str[i] >= 'a' && str[i]<='z') || (str[i] >= 'A' && str[i]<='Z') ||
                            (str[i] >= '0' && str[i]<='9') || (str[i]=='_')) continue;
                    else return (false);
                }
                return (true);
            }
        return (false);
} 
  
// Returns 'true' if the string is a KEYWORD. 
bool isKeyword(char* str) 
{ 
    if (!strcmp(str, "if") || !strcmp(str, "else") || 
        !strcmp(str, "elseif") || !strcmp(str, "print") ||  
        !strcmp(str, "break") ||  
         !strcmp(str, "continue") || !strcmp(str, "do") 
        || !strcmp(str, "double") || !strcmp(str, "float") 
        || !strcmp(str, "return") || !strcmp(str, "for") 
        || !strcmp(str, "while") || !strcmp(str, "foreach") 
        || !strcmp(str, "char") || !strcmp(str, "my") 
        || !strcmp(str, "local") || !strcmp(str, "switch") 
        || !strcmp(str, "void") || !strcmp(str, "static"))
        return (true); 
    return (false); 
} 
  
// Returns 'true' if the string is an INTEGER. 
bool isInteger(char* str) 
{ 
    int i, len = strlen(str); 
  
   //int i, len = s.length();
        if (len == 0)
            return (false);
        if (str[0]=='0'){
            if (len>0 && (str[1]=='x' || str[1]=='X')) {
                for (i = 2; i < len; i++) {
                    if (str[i] != '0' && str[i] != '1' && str[i] != '2'
                            && str[i] != '3' && str[i] != '4' && str[i] != '5'
                            && str[i] != '6' && str[i] != '7' && str[i] != '8'
                            && str[i] != '9' && str[i] != 'a' && str[i] != 'A'
                            && str[i] != 'b' && str[i] != 'B' && str[i] != 'c'
                            && str[i] != 'C' && str[i] != 'd' && str[i] != 'D'
                            && str[i] != 'e' && str[i] != 'E' && str[i] != 'f'
                            && str[i] != 'F'|| (str[i] == '-' && i > 0))
                        return (false);
                }
                return (true);
            }
            else if (len>2 && (str[1]=='b' || str[1]=='B')){
                if (str[2]=='0' || str[2]=='1'){
                    for (i = 3; i < len; i++) {
                        if (str[i] != '0' && str[i] != '1' )
                            return false;
                    }
                    return true;
                }
            }

            else {
                for (i = 1; i < len; i++) {
                    if (str[i] != '0' && str[i] != '1' && str[i] != '2'
                            && str[i] != '3' && str[i] != '4' && str[i] != '5'
                            && str[i] != '6' && str[i] != '7' || (str[i] == '-' && i > 0))
                        return (false);
                }
                return (true);
            }
        }
        else {
            for (i = 0; i < len; i++) {
                if (str[i] != '0' && str[i] != '1' && str[i] != '2'
                        && str[i] != '3' && str[i] != '4' && str[i] != '5'
                        && str[i] != '6' && str[i] != '7' && str[i] != '8'
                        && str[i] != '9' )
                    break;
            }
            if (i==len) return true;


        }
        return (false);

    }

bool isStringLiteral(char* str)
{

    int i, len = strlen(str);
    if (len == 0)
        return (false);
    if (str[0]=='\"' && str[len-1]=='\"')
        return true;
    return false;
}
  
bool isFloatLiteral(char* str)
{

    int i, len = strlen(str);
    if (len == 0)
        return (false);
    int j=0;

    while (j<len && str[j]>='0' && str[j]<='9') j++;
    if (j<len){
        if (str[j]=='.'){
            for (i = j+1 ; i < len; i++) {
                if (str[i] != '0' && str[i] != '1' && str[i] != '2'
                        && str[i] != '3' && str[i] != '4' && str[i] != '5'
                        && str[i] != '6' && str[i] != '7' && str[i] != '8'
                        && str[i] != '9')
                    break;
            }
            if (i==len) return true;
            j=i;
        }

        if (str[j]=='e' || str[j]=='E'){
            j++;
            if (j<len)
                if(str[j]>='0' && str[j]<='9') {

                    j++;
                    if (j<len)
                        if(j==len-1 && str[j]>='0' && str[j]<='9')
                            return true;
                        else return false;
                    return true;
                }

            return false;
        }
    }
    return false;
}

bool isCharLiteral(char* str)
{
    int i, len = strlen(str);
    if (len == 0)
        return (false);
    if (str[0]=='\''){

        if (len==3 && str[2]=='\'')
            return true;
        if (len==4 && str[1]=='\\' && (str[2]=='t' || str[2]=='n') && str[3]=='\'')
            return true;
    }
    return false;
}
  
char* subString(char* str, int left, int right) //extracting the substring
{ 
    int i; 
    char* subStr = (char*)malloc( 
                  sizeof(char) * (right - left + 2)); 
  
    for (i = left; i <= right; i++) 
        subStr[i - left] = str[i]; 
    subStr[right - left + 1] = '\0'; 
    return (subStr); 
} 

  
//Parse and return next token
void nextToken(char* str) 
{ 
    int left = 0, right = 0; 
    int len = strlen(str); 
  
    while (right <= len && left <= right) { 
        if (isDelimiter(str[right]) == false) 
            right++; 
  
        if (isDelimiter(str[right]) == true && left == right) { 
            if (isOperator(str[right]) == true) 
                printf("'%c' IS AN OPERATOR\n", str[right]); 
  
            right++; 
            left = right; 
        } else if (isDelimiter(str[right]) == true && left != right 
                   || (right == len && left != right)) { 
            char* subStr = subString(str, left, right - 1); 
  
            if (isKeyword(subStr) == true) 
                printf("'%s' IS A KEYWORD\n", subStr); 
  
            else if (isInteger(subStr) == true) 
                printf("'%s' IS AN INTEGER\n", subStr); 
  
        else if (isStringLiteral(subStr) == true) 
        printf("'%s' IS AN STRING LITERAL\n", subStr); 

        else if (isCharLiteral(subStr) == true) 
        printf("'%s' IS AN CHAR LITERAL\n", subStr); 
        
        else if (isFloatLiteral(subStr) == true) 
        printf("'%s' IS AN FLOAT LITERAL\n", subStr); 

  
            else if (perlIdentifier(subStr) == true
                     && isDelimiter(str[right - 1]) == false) 
                printf("'%s' IS A Valid IDENTIFIER\n", subStr); 
  
            else if (perlIdentifier(subStr) == false
                     && isDelimiter(str[right - 1]) == false) 
                printf("'%s' IS NOT A Valid IDENTIFIER\n", subStr); 
            left = right; 
        } 
    } 
    return; 
} 
  
int main() { 
    
    char str[1000];
    in_fp = fopen("LexTest.txt", "r");
    while (!feof(in_fp)){
        fgets(str, 1000, in_fp);
        //puts(str);
        nextToken(str);
    }
    fclose(in_fp);
    return 0;
}
